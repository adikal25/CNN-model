# -*- coding: utf-8 -*-
"""catsvsdogs.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vaOboGljhFKC83sChrsLa0BZv4LWZCHn
"""

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/

!kaggle datasets download -d salader/dogs-vs-cats

import zipfile
zip_ref=zipfile.ZipFile('/content/dogs-vs-cats.zip','r')
zip_ref.extractall('/content')
zip_ref.close()

import tensorflow as tf
from tensorflow import keras
from keras import Sequential
from keras.layers import Dense,Conv2D,MaxPooling2D,Flatten,BatchNormalization,Dropout
import matplotlib.pyplot as plt

#generators
trained_dataset=keras.utils.image_dataset_from_directory(
    directory='/content/train',
    labels='inferred',
    label_mode='int',#assigns cats and dogs with int 0 or 1
    batch_size=32,
    image_size=(256,256)
 )

testing_dataset=keras.utils.image_dataset_from_directory(
    directory='/content/test',
    labels='inferred',
    label_mode='int',#assigns cats and dogs with int 0 or 1
    batch_size=32,
    image_size=(256,256)
 )

#normalize the numpy array as its range is from (0,255) but we need the output
#between (0,1)

def process(image,label):
  image=tf.cast(image/255.,tf.float32)
  return image,label

#mapping the process to the both datset as it updates both of them
trained_dataset= trained_dataset.map(process)
testing_dataset=testing_dataset.map(process)

#creating a cnn model

model = Sequential([
    Conv2D(32, kernel_size=(3, 3), padding='valid', activation='relu',
           input_shape=(256, 256, 3)),
    BatchNormalization(),
    MaxPooling2D(pool_size=(2, 2), strides=2, padding='valid'),

    Conv2D(64, kernel_size=(3, 3), padding='valid', activation='relu'),
    BatchNormalization(),
    MaxPooling2D(pool_size=(2, 2), strides=2, padding='valid'),

    Conv2D(128, kernel_size=(3, 3), padding='valid', activation='relu'),
    BatchNormalization(),
    MaxPooling2D(pool_size=(2, 2), strides=2, padding='valid'),

    Flatten(),

    Dense(128, activation="relu"),
    Dropout(0.1),
    Dense(64, activation="relu"),
    Dropout(0.1),
    Dense(1, activation="sigmoid")
])

model.summary()

model.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])

history=model.fit(trained_dataset,epochs=10,validation_data=testing_dataset)
#------------------------------------------------------------------
#test-data
#import cv2

#test_img=cv2.imread('/content/cat-img.jpeg')

#plt.imshow(test_img)

#test_img=cv2.resize(test_img,(256,256))
#test_input=test_img.reshape((1,256,256,3))

#model.predict(test_input)
